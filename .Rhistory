makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(inv) m <<- inv
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- Solve(data, ...)
x$setinverse(m)
m
}
a<-Matrix(x(0,1,2,4),2,2)
a<-matrix(x(0,1,2,4),2,2)
a<-matrix(c(0,1,2,4),2,2)
a
Solve(a)
solve(a)
a4f<-makeCacheMatrix(a)
cacheSolve(a)
cacheSolve(a4f)
cacheSolve(a4f)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
cacheSolve(a4f)
a
cacheSolve(a4f)
cacheSolve(a4f)
b<-matrix(c(2,0,,0,.25),2,2)
b<-matrix(c(2,0,0,.25),2,2)
b
solve(b)
cacheSolve$set(b)
makeCacheMatrix$set(b)
a$set(b)
a4f(b)
a4f
a4f$set(b)
b4f<-a4f$set(b)
cacheSolve(b4f)
cacheSolve(a4f)
cacheSolve(a4f)
a<-matrix(c(0,1,,2,4),2,2)
a<-matrix(c(0,1,2,4),2,2)
a
4functions<-makeCacheMatrix(a)
l4functions<-makeCacheMatrix(a)
cacheSolve(l4functions) #computes inverse of a
cacheSolve(l4functions) #now gives the cached inverse of a
b<-matrix(c(2,0,0,.25),2,2)
b
l4functions$set(b)
cacheSolve(l4functions) #computes inverse of b
cacheSolve(l4functions) #now gives the cached inverse of b
a<-matrix(c(0,1,2,4),2,2)
l4functions<-makeCacheMatrix(a)
cacheSolve(l4functions) #computes inverse of a
cacheSolve(l4functions) #now gives the cached inverse of a
b<-matrix(c(2,0,0,.25),2,2)
l4functions$set(b)  #assigns b to the 4 functions
cacheSolve(l4functions) #computes inverse of b
cacheSolve(l4functions) #now gives the cached inverse of b
q()
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(inv) m <<- inv
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
a<-matrix(c(0,1,2,4),2,2)
l4functions<-makeCacheMatrix(a)
cacheSolve(l4functions) #computes inverse of a
cacheSolve(l4functions) #now gives the cached inverse of a
b<-matrix(c(2,0,0,.25),2,2)
l4functions$set(b)  #assigns b to the 4 functions
cacheSolve(l4functions) #computes inverse of b
cacheSolve(l4functions) #now gives the cached inverse of b
q()
